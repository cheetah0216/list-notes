#!/bin/bash

config="${HOME}/.listrc"
source "$config"

. $HOME/bin/bash.library
. $HOME/bin/list.library

if [ $debug -eq 1 ]; then
  cat <<TODO #&>/dev/null

  TODO:
    ()  Read config files in bash.  So the user can choose their own
        "lists_dir", etc.


  RESOURCES:
    http://wiki.bash-hackers.org/howto/conffile
    http://www.google.com/#sclient=psy&hl=en&q=reading+config+files+bash&aq=f&aqi=&aql=&oq=&gs_rfai=&pbx=1&fp=a20cfd04ba3c5cf9
    http://www.linuxquestions.org/questions/linux-general-1/read-variables-from-a-text-file-in-bash-511760/
    http://www.linuxquestions.org/questions/programming-9/bash-shell-program-read-a-configuration-file-276852/
    http://www.linuxquestions.org/questions/programming-9/reading-a-conf-file-from-a-bash-script-348782/
    http://www.linuxquestions.org/questions/programming-9/bash-read-lines-from-a-configuration-script-366296/
    http://www.askdavetaylor.com/how_do_i_read_lines_of_data_in_a_shell_script.html
    http://www.kadirsert.com/2011/bash-script-reading-config-file/

    **** Worth traversing ****
    * Bash Hackers Wiki
      http://wiki.bash-hackers.org/howto/conffile

TODO
fi
if [ $debug -eq 1 ]; then exit; fi

cd "${lists_dir}"
case $1 in

	'')
		if [ -z $1 ]; then
			echo "Enter note to view: "
			read -e input
			#clear
		fi
		#cat ~/lists/$input | grep -v "^[ 	]*[#]"
		cat $0 | grep -v "^[ 	]*[#]"
		echo ;;

  -dot)
    case $2 in
      bash) vim -O ~/.bashrc{,.local,.paul} ~/.hashrc ;;
      vim) vim -O ~/.vimrc{,.josh,.local} ;;
      profile) vim -O1 ~/.bash_profile ;;
      alias|aliases) vim -O1 ~/aliases.sh;;
      export) vim -O1 ~/exports.sh;;
      fun|functions) vim -O1 ~/functions.sh;;
      input|inputrc) vim -O1 ~/.inputrc;;
      ps1) vim -O1 ~/ps1rc.sh;;
      list|lists) 
        d="~/hashrocket/dotmatrix"
        vim -O ~/.listrc $d/.vim/{syntax,autoload}/lists.vim ;;
      hashrocket)
        d="~/hashrocket/dotmatrix"
        $d/.{gitconfig,hashrc,screenrc,vim/plugin/hashrocket.vim,vimrc} ;;
      screen|screenrc) vim -O1 ~/.screenrc ;;
      ''|*)
        cat <<-CAT

  The options for editing dot files is:
    bash
    vim
    profile
    alias | aliases
    export
    fun | functions
    input | inputrc
    ps1
    list | lists
    hashrocket
    screen | screenrc

CAT
        ;;
    esac ;;

	-e)
		remove_switch $@

		## if no file was specified, use readline for tab completion
		if [ -z $2 ]; then
			echo "Enter note to edit: "
			read -e input
    elif [ -d "$2" ]; then
      if [ -f "${2}/index" ]; then
        vim -O "${2}/index"
      elif [ -f "${2}/list" ]; then
        vim -O "${2}/list"
      else
        ls "${2}/"
        echo
        echo -n "Open ${2}/: "
        read -e dirfile
        if [ -f "${2}/${dirfile}" ]; then
          vim -O "${2}/${dirfile}"
        fi
      fi
    else
      case $2 in
        'sch')
          list -e calendar/list
          echo
          exit ;;
        'sched')
          list -e calendar/list
          echo
          exit ;;
        'schedule')
          list -e calendar/list
          echo
          exit ;;
      esac
		fi

		ensure_paths "$input"
		vim -O $input ;;

  -new | --new)
    newfilename="new/$(date +'%Y%m%d.%s')"
    vim $newfilename
    ;;

	-g)
		garg="${@/-g/}"
		garg=${garg# }
    notpaths="-not -path '*nogrep' -and -not -path '*.git' -and -not -path '*erlang/api'"
    find `pwd` -type d -depth 1 -not -path '*nogrep*' -not -path 'home' -not -path '*.git*' -not -path '*erlang*' -exec grep -RiI "$garg" "{}" \; | grep -E '^.{1,200}$'
    ;;

	-gl | --gl)
		garg="${@/-gl/}"
		garg=${garg# }
    notpaths="-not -path '*nogrep' -and -not -path '*.git' -and -not -path '*erlang/api'"
    find `pwd` -type d -depth 1 -not -path '*nogrep*' -and -not -path 'home' -and -not -path '*.git*' -and -not -path '*erlang*' -exec grep -RiIl "$garg" "{}" \;
    ;;

  -dir | --dir)
  echo "${lists_dir}"
  exit;;

  -api | --api)
		garg="${@/-api/}"
		garg=${garg# }
    grep -IRin --exclude="nogrep" "$garg" ~/lists/erlang/api ;;

	-map | --map)
		find . | sed 's#^..##' | vim -
		;;

  -find | -f | --find)
    not='(erlang.api|home|.git|android-sdk-mac|DS_Store|nogrep)'
    ls -1 "${lists_dir}" | grep -vE "$not" | while read line
    do
      find -L "${lists_dir}/${line}" -type f | grep -vE "$not" | grep "$2"
    done ;;

  #-f)
	#	find "${lists_dir}" -type f | grep -vE '(erlang.api|nogrep)' | grep "$2" ;;

  -ff | --ff | --findall | --find-all)
		find "${lists_dir}" -type f | grep "$2" ;;

	-ls | --ls)
		#clear
    if [ -z ${lists_dir}/$2 ]
    then
      echo
      cd ${lists_dir}
      ls -GRp
    else
      echo
      ls -GRp ${lists_dir}/$2
      echo
    fi
    ;;

	-cat | --cat)
		if [ -z $2 ]; then
      find . -type d -not -path '*.git*' -not -path 'home' -not -path '*nogrep*' -not -path '*erlang*api*' | column
      echo
		else
      shift
      ls -AFR $@   ### Used to be $2 then $* now $@
		fi ;;

# -cat)
#   if [ -z $2 ]; then
#     cnt=0
#     for cat in $(find . -type d -not -path '*.git*' -and -not -path '*nogrep*' | sed 's/\.\/\{0,1\}//')
#     do
#       if [ $cnt -eq 6 ]; then cnt=0; echo; fi
#       printf "%-20s" $cat
#       cnt=$[ $cnt + 1 ]
#     done
#     echo
#   else
#     ls -FR $*
#   fi ;;

	-edit | --edit)
		vim $0 ;;

	-all | --all)
		#clear
		ls -R ;;

	*)
		#clear
		cat $@ | grep -v "^[ 	]*[#]"
		## cat ~/lists/$1 | grep -v "^[ 	]*[#]"
		echo ;;

esac

#exit 0


#  Changelog
#
#	[ 2010-02-15 21:43:13 ]
#		Removed all of the clear commands, because those commands are
#	not very unix-like, and go against typical reusability conventions.
#

